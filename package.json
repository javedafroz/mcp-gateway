{
  "name": "mcp-gateway",
  "version": "1.0.0",
  "description": "A production-ready middleware service that converts OpenAPI specifications into Model Context Protocol (MCP) servers, featuring a React frontend with Keycloak authentication and AI-powered chat interface",
  "private": true,
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "dev": "concurrently --kill-others-on-fail \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd packages/backend && python gateway_server.py",
    "dev:frontend": "cd packages/frontend && npm run dev",
    "start": "npm run dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd packages/frontend && npm run build",
    "build:backend": "cd packages/backend && echo 'Backend build completed - Python application ready'",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd packages/frontend && npm run test -- --watchAll=false",
    "test:backend": "cd packages/backend && python -m pytest || echo 'Backend tests not implemented yet'",
    "test:watch": "concurrently \"npm run test:frontend -- --watch\" \"npm run test:backend -- --watch\"",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd packages/frontend && npm run lint",
    "lint:backend": "cd packages/backend && echo 'Backend linting not configured yet'",
    "lint:fix": "npm run lint:frontend -- --fix",
    "format": "cd packages/frontend && npm run format",
    "type-check": "cd packages/frontend && npm run type-check",
    "docker:full": "docker compose -f docker-compose.full.yml up --build --detach",
    "docker:full:down": "docker compose -f docker-compose.full.yml down",
    "docker:dev": "cd packages/backend && docker compose -f docker-compose.dev.yml up --build --detach",
    "docker:prod": "cd packages/backend && docker compose -f docker-compose.prod.yml up --build --detach",
    "docker:down": "docker compose down && cd packages/backend && docker compose down",
    "docker:logs": "docker compose -f docker-compose.full.yml logs -f",
    "docker:clean": "docker system prune -a --volumes",
    "install:all": "npm install && cd packages/frontend && npm install && cd ../backend && pip install -r requirements.txt",
    "setup": "./setup.sh",
    "health": "curl -f http://localhost:8090/health && curl -f http://localhost:3000/health",
    "clean": "rm -rf node_modules packages/*/node_modules packages/backend/venv packages/frontend/build packages/frontend/.next",
    "postinstall": "echo 'ðŸŽ‰ MCP Gateway dependencies installed! Run npm run setup to configure environment files.'"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0",
    "python": ">=3.13.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/mcp-gateway.git"
  },
  "homepage": "https://github.com/your-org/mcp-gateway#readme",
  "bugs": {
    "url": "https://github.com/your-org/mcp-gateway/issues"
  },
  "keywords": [
    "mcp",
    "model-context-protocol",
    "openapi",
    "swagger",
    "gateway",
    "middleware",
    "react",
    "typescript",
    "fastapi",
    "python",
    "keycloak",
    "authentication",
    "langchain",
    "openai",
    "ai",
    "chat",
    "docker",
    "microservices",
    "api-gateway",
    "rest-api"
  ],
  "author": {
    "name": "MCP Gateway Contributors",
    "url": "https://github.com/your-org/mcp-gateway/graphs/contributors"
  },
  "contributors": [
    {
      "name": "Your Name",
      "email": "your.email@example.com"
    }
  ],
  "license": "MIT",
  "main": "packages/backend/gateway_server.py",
  "directories": {
    "doc": "docs",
    "test": "tests"
  },
  "config": {
    "commitizen": {
      "path": "conventional_changelog"
    }
  }
}
